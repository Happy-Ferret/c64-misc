#!/usr/bin/python
# ----------------------------------------------------------------------------
# Multiplying Table Generator
# ----------------------------------------------------------------------------
'''
Multiplying Table Generator
'''
from __future__ import division, unicode_literals, print_function
import sys
import os
import getopt


__docformat__ = 'restructuredtext'


def run(ffrom, to, multnumber):
    # print 8 elements per line
    sys.stdout.write('; autogenerated table: %s -f%s -t%s %s' % (os.path.basename(sys.argv[0]), ffrom, to, multnumber))

    for i, item in enumerate(range(ffrom, to)):
        if i % 8 == 0:
            sys.stdout.write('\n.word $%04x' % (i * multnumber))
        else:
            sys.stdout.write(',$%04x' % (i * multnumber))
    sys.stdout.write('\n')


def help():
    print("%s v0.1 - An utility to create multiplyting tables. Useful for c64 and other 8-bit computers" % os.path.basename(sys.argv[0]))
    print("\nUsage: %s [options] number_to_multiply" % os.path.basename(sys.argv[0]))
    print("\t-f from_number\t\t\tDefault=0")
    print("\t-t to_number\t\t\tDefault=255")
    print("\nExamples:")
    print("\t%s -f0 -t24 40" % os.path.basename(sys.argv[0]))
    sys.exit(-1)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        help()

    ffrom = 0
    to = 255
    number_to_multiply = 0

    argv = sys.argv[1:]
    try:
        opts, args = getopt.getopt(argv, "f:t:", ["from=", "to="])
        for opt, arg in opts:
            if opt in ("-f", "--from"):
                ffrom = int(arg)
            elif opt in ("-t", "--tto"):
                to = int(arg)
        if not len(args) == 1:
            help()
        else:
            number_to_multiply = int(args[0])
    except getopt.GetoptError, e:
        print(e)

    run(ffrom, to, number_to_multiply)
