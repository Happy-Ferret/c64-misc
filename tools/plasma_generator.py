#!/usr/bin/env python

__docformat__ = 'restructuredtext'

# This is not needed if you have PGU installed
import sys
sys.path.insert(0, "..")

import math
import time
import pygame
import pgu
from pgu import gui, timer

# autogenerated table: easing_table_generator.py -s128 -m128 -aTrue -r easeInOutElastic
ease_in_out_elastic_table = (
  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  1,
  1,  1,  1,  1,  1,  0,  0,255,
254,254,253,253,253,254,255,  0,
  2,  4,  5,  7,  8,  8,  8,  6,
  2,254,249,244,239,235,232,233,
236,243,254, 11, 26, 41, 54, 64,
 74, 87,102,117,130,141,148,151,
152,149,145,140,135,130,126,122,
120,120,120,121,123,124,126,128,
129,130,131,131,131,130,130,129,
128,128,127,127,127,127,127,127,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,127,
127,127,127,127,127,128,128,129,
130,130,131,131,131,130,129,128,
126,124,123,121,120,120,120,122,
126,130,135,140,145,149,152,151,
148,141,130,117,102, 87, 74, 64,
 54, 41, 26, 11,254,243,236,233,
232,235,239,244,249,254,  2,  6,
  8,  8,  8,  7,  5,  4,  2,  0,
255,254,253,253,253,254,254,255,
  0,  0,  1,  1,  1,  1,  1,  1,
  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,
)

# autogenerated table: easing_table_generator.py -s128 -m128 -aTrue -r easeInOutBounce
ease_in_out_bounce_table = (
  1,  1,  1,  1,  0,  0,  1,  2,
  3,  4,  4,  4,  4,  3,  3,  2,
  1,  1,  4,  6,  8, 10, 12, 13,
 14, 15, 15, 16, 16, 16, 16, 15,
 14, 13, 12, 10,  9,  7,  4,  2,
  1,  7, 12, 17, 21, 26, 30, 34,
 37, 41, 44, 47, 50, 52, 54, 56,
 58, 60, 61, 62, 63, 64, 64, 64,
 64, 64, 65, 66, 67, 68, 70, 72,
 74, 76, 78, 81, 84, 87, 91, 94,
 98,102,107,111,116,121,127,126,
124,121,119,118,116,115,114,113,
112,112,112,112,113,113,114,115,
116,118,120,122,124,127,127,126,
125,125,124,124,124,124,125,126,
127,128,128,127,127,127,127,128,
127,127,127,127,128,128,127,126,
125,124,124,124,124,125,125,126,
127,127,124,122,120,118,116,115,
114,113,113,112,112,112,112,113,
114,115,116,118,119,121,124,126,
127,121,116,111,107,102, 98, 94,
 91, 87, 84, 81, 78, 76, 74, 72,
 70, 68, 67, 66, 65, 64, 64, 64,
 64, 64, 63, 62, 61, 60, 58, 56,
 54, 52, 50, 47, 44, 41, 37, 34,
 30, 26, 21, 17, 12,  7,  1,  2,
  4,  7,  9, 10, 12, 13, 14, 15,
 16, 16, 16, 16, 15, 15, 14, 13,
 12, 10,  8,  6,  4,  1,  1,  2,
  3,  3,  4,  4,  4,  4,  3,  2,
  1,  0,  0,  1,  1,  1,  1,  0,
)
#autogenerated table: easing_table_generator.py -s128 -m128 -aTrue -r linear
linear_table = (
  1,  2,  3,  4,  5,  6,  7,  8,
  9, 10, 11, 12, 13, 14, 15, 16,
 17, 18, 19, 20, 21, 22, 23, 24,
 25, 26, 27, 28, 29, 30, 31, 32,
 33, 34, 35, 36, 37, 38, 39, 40,
 41, 42, 43, 44, 45, 46, 47, 48,
 49, 50, 51, 52, 53, 54, 55, 56,
 57, 58, 59, 60, 61, 62, 63, 64,
 65, 66, 67, 68, 69, 70, 71, 72,
 73, 74, 75, 76, 77, 78, 79, 80,
 81, 82, 83, 84, 85, 86, 87, 88,
 89, 90, 91, 92, 93, 94, 95, 96,
 97, 98, 99,100,101,102,103,104,
105,106,107,108,109,110,111,112,
113,114,115,116,117,118,119,120,
121,122,123,124,125,126,127,128,
127,126,125,124,123,122,121,120,
119,118,117,116,115,114,113,112,
111,110,109,108,107,106,105,104,
103,102,101,100, 99, 98, 97, 96,
 95, 94, 93, 92, 91, 90, 89, 88,
 87, 86, 85, 84, 83, 82, 81, 80,
 79, 78, 77, 76, 75, 74, 73, 72,
 71, 70, 69, 68, 67, 66, 65, 64,
 63, 62, 61, 60, 59, 58, 57, 56,
 55, 54, 53, 52, 51, 50, 49, 48,
 47, 46, 45, 44, 43, 42, 41, 40,
 39, 38, 37, 36, 35, 34, 33, 32,
 31, 30, 29, 28, 27, 26, 25, 24,
 23, 22, 21, 20, 19, 18, 17, 16,
 15, 14, 13, 12, 11, 10,  9,  8,
  7,  6,  5,  4,  3,  2,  1,  0,
)


# autogenerated table: easing_table_generator.py -s256 -m128 -aTrue sin
sine_table = (
  2,  3,  5,  6,  8,  9, 11, 13,
 14, 16, 17, 19, 20, 22, 23, 25,
 27, 28, 30, 31, 33, 34, 36, 37,
 39, 40, 42, 43, 45, 46, 48, 49,
 50, 52, 53, 55, 56, 58, 59, 60,
 62, 63, 64, 66, 67, 68, 70, 71,
 72, 74, 75, 76, 78, 79, 80, 81,
 82, 84, 85, 86, 87, 88, 89, 91,
 92, 93, 94, 95, 96, 97, 98, 99,
100,101,102,103,104,105,106,106,
107,108,109,110,111,111,112,113,
114,114,115,116,116,117,118,118,
119,119,120,121,121,122,122,122,
123,123,124,124,125,125,125,126,
126,126,126,127,127,127,127,127,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,127,
127,127,127,127,126,126,126,126,
125,125,125,124,124,123,123,122,
122,122,121,121,120,119,119,118,
118,117,116,116,115,114,114,113,
112,111,111,110,109,108,107,106,
106,105,104,103,102,101,100, 99,
 98, 97, 96, 95, 94, 93, 92, 91,
 89, 88, 87, 86, 85, 84, 82, 81,
 80, 79, 78, 76, 75, 74, 72, 71,
 70, 68, 67, 66, 64, 63, 62, 60,
 59, 58, 56, 55, 53, 52, 50, 49,
 48, 46, 45, 43, 42, 40, 39, 37,
 36, 34, 33, 31, 30, 28, 27, 25,
 23, 22, 20, 19, 17, 16, 14, 13,
 11,  9,  8,  6,  5,  3,  2,  0
 )

#; autogenerated table: easing_table_generator.py -s128 -m128 -aTrue -r sin
sine_times_2_table = (
  3,  6,  9, 13, 16, 19, 22, 25,
 28, 31, 34, 37, 40, 43, 46, 49,
 52, 55, 58, 60, 63, 66, 68, 71,
 74, 76, 79, 81, 84, 86, 88, 91,
 93, 95, 97, 99,101,103,105,106,
108,110,111,113,114,116,117,118,
119,121,122,122,123,124,125,126,
126,127,127,127,128,128,128,128,
128,128,128,127,127,127,126,126,
125,124,123,122,122,121,119,118,
117,116,114,113,111,110,108,106,
105,103,101, 99, 97, 95, 93, 91,
 88, 86, 84, 81, 79, 76, 74, 71,
 68, 66, 63, 60, 58, 55, 52, 49,
 46, 43, 40, 37, 34, 31, 28, 25,
 22, 19, 16, 13,  9,  6,  3,  0,
  3,  6,  9, 13, 16, 19, 22, 25,
 28, 31, 34, 37, 40, 43, 46, 49,
 52, 55, 58, 60, 63, 66, 68, 71,
 74, 76, 79, 81, 84, 86, 88, 91,
 93, 95, 97, 99,101,103,105,106,
108,110,111,113,114,116,117,118,
119,121,122,122,123,124,125,126,
126,127,127,127,128,128,128,128,
128,128,128,127,127,127,126,126,
125,124,123,122,122,121,119,118,
117,116,114,113,111,110,108,106,
105,103,101, 99, 97, 95, 93, 91,
 88, 86, 84, 81, 79, 76, 74, 71,
 68, 66, 63, 60, 58, 55, 52, 49,
 46, 43, 40, 37, 34, 31, 28, 25,
 22, 19, 16, 13,  9,  6,  3,  0,
 )

# autogenerated table: easing_table_generator.py -s128 -m255 -aTrue -r bezier:0,0.02,0.98,1
ease_table = (0,  0,  1,  1,  2,  2,  3,  4,
          4,  5,  6,  7,  8, 10, 11, 12,
         14, 15, 17, 18, 20, 21, 23, 25,
         27, 29, 31, 33, 35, 37, 39, 41,
         44, 46, 48, 51, 53, 55, 58, 60,
         63, 66, 68, 71, 73, 76, 79, 82,
         84, 87, 90, 93, 96, 98,101,104,
        107,110,113,116,119,122,125,128,
        130,133,136,139,142,145,148,151,
        154,157,159,162,165,168,171,173,
        176,179,182,184,187,189,192,195,
        197,200,202,204,207,209,211,214,
        216,218,220,222,224,226,228,230,
        232,234,235,237,238,240,241,243,
        244,245,247,248,249,250,251,251,
        252,253,253,254,254,255,255,255,
        255,255,254,254,253,253,252,251,
        251,250,249,248,247,245,244,243,
        241,240,238,237,235,234,232,230,
        228,226,224,222,220,218,216,214,
        211,209,207,204,202,200,197,195,
        192,189,187,184,182,179,176,173,
        171,168,165,162,159,157,154,151,
        148,145,142,139,136,133,130,128,
        125,122,119,116,113,110,107,104,
        101, 98, 96, 93, 90, 87, 84, 82,
         79, 76, 73, 71, 68, 66, 63, 60,
         58, 55, 53, 51, 48, 46, 44, 41,
         39, 37, 35, 33, 31, 29, 27, 25,
         23, 21, 20, 18, 17, 15, 14, 12,
         11, 10,  8,  7,  6,  5,  4,  4,
          3,  2,  2,  1,  1,  0,  0,  0
          )

#; autogenerated table: easing_table_generator.py -s128 -m128 -aTrue -r bezier:0,0.02,0.98,1
ease_bezier_table = (
          0,  0,  0,  1,  1,  1,  1,  2,
          2,  3,  3,  4,  4,  5,  5,  6,
          7,  8,  8,  9, 10, 11, 12, 13,
         13, 14, 15, 16, 17, 19, 20, 21,
         22, 23, 24, 25, 27, 28, 29, 30,
         32, 33, 34, 36, 37, 38, 40, 41,
         42, 44, 45, 47, 48, 49, 51, 52,
         54, 55, 57, 58, 60, 61, 63, 64,
         65, 67, 68, 70, 71, 73, 74, 76,
         77, 79, 80, 81, 83, 84, 86, 87,
         88, 90, 91, 92, 94, 95, 96, 98,
         99,100,101,103,104,105,106,107,
        108,109,111,112,113,114,115,115,
        116,117,118,119,120,120,121,122,
        123,123,124,124,125,125,126,126,
        127,127,127,127,128,128,128,128,
        128,128,128,127,127,127,127,126,
        126,125,125,124,124,123,123,122,
        121,120,120,119,118,117,116,115,
        115,114,113,112,111,109,108,107,
        106,105,104,103,101,100, 99, 98,
         96, 95, 94, 92, 91, 90, 88, 87,
         86, 84, 83, 81, 80, 79, 77, 76,
         74, 73, 71, 70, 68, 67, 65, 64,
         63, 61, 60, 58, 57, 55, 54, 52,
         51, 49, 48, 47, 45, 44, 42, 41,
         40, 38, 37, 36, 34, 33, 32, 30,
         29, 28, 27, 25, 24, 23, 22, 21,
         20, 19, 17, 16, 15, 14, 13, 13,
         12, 11, 10,  9,  8,  8,  7,  6,
          5,  5,  4,  4,  3,  3,  2,  2,
          1,  1,  1,  1,  0,  0,  0,  0,
        )


fn_table_1 = ease_bezier_table
fn_table_2 = ease_bezier_table

colors = ((255,255,255),
            (192,192,192),
            (64,64,224),
            (128,128,128),
            (0,0,128),
            (0,0,0),
            )

color_idx_table = (
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
        3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
        3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        )


def _put_pixel(surface, x, y, color):
    #Tandy 1000 emulation: using two pixels for one point
    #surface.set_at((x*2, y), color)
    #surface.set_at((x*2+1, y), color)
    pos = (x*4, y*2)
    surface.fill(color, (pos, (4, 2)))

def render_plasma(surface, width, height, inc_x, inc_y, off_x, off_y):
    x_buff = [None] * width
    y_buff = [None] * height

    a = (inc_x[0] + 256) % 256
    b = (inc_x[1] + 256) % 256
    c = (inc_y[0] + 256) % 256
    d = (inc_y[1] + 256) % 256

    fn_idx_1 = off_x[0]
    fn_idx_2 = off_x[1]
    for idx, _ in enumerate(x_buff):
        fn_idx_1 = (fn_idx_1 + 256) % 256
        fn_idx_2 = (fn_idx_2 + 256) % 256
        x_buff[idx] = fn_table_1[fn_idx_1] + fn_table_2[fn_idx_2]
        fn_idx_1 += a
        fn_idx_2 += b

    fn_idx_1 = off_y[0]
    fn_idx_2 = off_y[1]
    for idx, _ in enumerate(y_buff):
        fn_idx_1 = (fn_idx_1 + 256) % 256
        fn_idx_2 = (fn_idx_2 + 256) % 256
        y_buff[idx] = fn_table_1[fn_idx_1] + fn_table_2[fn_idx_2]
        fn_idx_1 += c
        fn_idx_2 += d

    for y in range(0, height):
        for x in range(0, width):
            color_idx = x_buff[x] + y_buff[y]
            color_idx = color_idx % 256
            color_idx = color_idx_table[color_idx]
            color = colors[color_idx]
            _put_pixel(surface, x, y, color)



class DrawingArea(gui.Widget):
    def __init__(this, width, height):
        gui.Widget.__init__(this, width=width, height=height)
        this.imageBuffer = pygame.Surface((width, height))

    def paint(this, surf):
        # Paint whatever has been captured in the buffer
        surf.blit(this.imageBuffer, (0, 0))

    # Call this function to take a snapshot of whatever has been rendered
    # onto the display over this widget.
    def save_background(this):
        disp = pygame.display.get_surface()
        this.imageBuffer.blit(disp, this.get_abs_rect())


class MainGui(gui.Desktop):
    gameAreaHeight = 500
    gameArea = None
    menuArea = None
    # The game engine
    engine = None

    def __init__(this, disp):
        gui.Desktop.__init__(this)

        # Setup the 'game' area where the action takes place
        this.gameArea = DrawingArea(disp.get_width(),
                                    this.gameAreaHeight)
        # Setup the gui area
        this.menuArea = gui.Container(
            height=disp.get_height()-this.gameAreaHeight)

        tbl = gui.Table(height=disp.get_height())
        tbl.tr()
        tbl.td(this.gameArea)
        tbl.tr()
        tbl.td(this.menuArea)

        this.setup_menu()

        this.init(tbl, disp)

    def setup_menu(this):
        tbl = gui.Table(vpadding=5, hpadding=2)
        tbl.tr()

        def inc_changed_x1(slider):
            this.engine.plasma_inc_x[0] = slider.value
        def inc_changed_x2(slider):
            this.engine.plasma_inc_x[1] = slider.value
        def inc_changed_y1(slider):
            this.engine.plasma_inc_y[0] = slider.value
        def inc_changed_y2(slider):
            this.engine.plasma_inc_y[1] = slider.value

        def offset_changed_x1(slider):
            this.engine.off_x1 = slider.value
        def offset_changed_x2(slider):
            this.engine.off_x2 = slider.value
        def offset_changed_y1(slider):
            this.engine.off_y1 = slider.value
        def offset_changed_y2(slider):
            this.engine.off_y2 = slider.value

        def dump_info():
            print('inc x = %s' % str(this.engine.plasma_inc_x))
            print('inc y = %s' % str(this.engine.plasma_inc_y))
            print('off x = (%d,%d)' % (this.engine.off_x1, this.engine.off_x2))
            print('off y = (%d,%d)' % (this.engine.off_y1, this.engine.off_y2))

        # inc x0
        slider = gui.HSlider(value=0,min=0,max=255,size=10,width=256)
        slider.connect(gui.CHANGE, inc_changed_x1, slider)
        tbl.td(slider)

        # inc x1
        slider = gui.HSlider(value=0,min=0,max=255,size=10,width=256)
        slider.connect(gui.CHANGE, inc_changed_x2, slider)
        tbl.td(slider)

        # inc y0
        tbl.tr()
        slider = gui.HSlider(value=0,min=0,max=255,size=10,width=256)
        slider.connect(gui.CHANGE, inc_changed_y1, slider)
        tbl.td(slider)

        # inc y1
        slider = gui.HSlider(value=0,min=0,max=255,size=10,width=256)
        slider.connect(gui.CHANGE, inc_changed_y2, slider)
        tbl.td(slider)


        # off x0
        tbl.tr()
        slider = gui.HSlider(value=0,min=0,max=255,size=10,width=256)
        slider.connect(gui.CHANGE, offset_changed_x1, slider)
        tbl.td(slider)

        # off x1
        slider = gui.HSlider(value=0,min=0,max=255,size=10,width=256)
        slider.connect(gui.CHANGE, offset_changed_x2, slider)
        tbl.td(slider)

        # off y0
        tbl.tr()
        slider = gui.HSlider(value=0,min=0,max=255,size=10,width=256)
        slider.connect(gui.CHANGE, offset_changed_y1, slider)
        tbl.td(slider)

        # off y1
        slider = gui.HSlider(value=0,min=0,max=255,size=10,width=256)
        slider.connect(gui.CHANGE, offset_changed_y2, slider)
        tbl.td(slider)


        tbl.tr()
        button = gui.Button('Dump info')
        button.connect(gui.CLICK, dump_info)
        tbl.td(button)

        this.menuArea.add(tbl, 0, 0)

    def open(this, dlg, pos=None):
        # Gray out the game area before showing the popup
        rect = this.gameArea.get_abs_rect()
        dark = pygame.Surface(rect.size).convert_alpha()
        dark.fill((0,0,0,150))
        pygame.display.get_surface().blit(dark, rect)
        # Save whatever has been rendered to the 'game area' so we can
        # render it as a static image while the dialog is open.
        this.gameArea.save_background()
        # Pause the gameplay while the dialog is visible
        running = not(this.engine.clock.paused)
        this.engine.pause()
        gui.Desktop.open(this, dlg, pos)
        while (dlg.is_open()):
            for ev in pygame.event.get():
                this.event(ev)
            rects = this.update()
            if (rects):
                pygame.display.update(rects)
        if (running):
            # Resume gameplay
            this.engine.resume()

    def get_render_area(this):
        return this.gameArea.get_abs_rect()


class GameEngine(object):
    def __init__(this, disp):
        this.disp = disp
        this.square = pygame.Surface((400,400)).convert_alpha()
        this.square.fill((255,0,0))
        this.app = MainGui(this.disp)
        this.app.engine = this

        this.plasma_inc_x = [0, 0]
        this.plasma_inc_y = [0, 0]
        this.plasma_off_x = [0, 0]
        this.plasma_off_y = [0, 0]

        this.off_x1 = 0
        this.off_x2 = 0
        this.off_y1 = 0
        this.off_y2 = 0

    # Pause the game clock
    def pause(this):
        this.clock.pause()

    # Resume the game clock
    def resume(this):
        this.clock.resume()

    def render(this, dest, rect):
        PLASMA_WIDTH = 54
        PLASMA_HEIGHT = 16
        render_plasma(dest, PLASMA_WIDTH, PLASMA_HEIGHT,this.plasma_inc_x, this.plasma_inc_y, this.plasma_off_x, this.plasma_off_y)
        this.plasma_off_x[0] += this.off_x1
        this.plasma_off_x[1] += this.off_x2
        this.plasma_off_y[0] += this.off_y1
        this.plasma_off_y[1] += this.off_y2
        this.disp.blit(dest, rect)
        return (rect,)

    def run(this):
        this.app.update()
        pygame.display.flip()

        this.font = pygame.font.SysFont("", 16)

        this.clock = timer.Clock() #pygame.time.Clock()
        done = False
        while not done:
            # Process events
            for ev in pygame.event.get():
                if (ev.type == pygame.QUIT or 
                    ev.type == pygame.KEYDOWN and ev.key == pygame.K_ESCAPE):
                    done = True
                else:
                    # Pass the event off to pgu
                    this.app.event(ev)
            # Render the game
            rect = this.app.get_render_area()
            updates = []
            this.disp.set_clip(rect)
            lst = this.render(this.disp, rect)
            if (lst):
                updates += lst
            this.disp.set_clip()

            # Cap it at 30fps
            this.clock.tick(30)

            # Give pgu a chance to update the display
            lst = this.app.update()
            if (lst):
                updates += lst
            pygame.display.update(updates)
            pygame.time.wait(10)


###
disp = pygame.display.set_mode((800, 600))
eng = GameEngine(disp)
eng.run()

