#!/usr/bin/python
# ----------------------------------------------------------------------------
# Easing Table Generator
# (c) 2015 Ricardo Quesada
# ----------------------------------------------------------------------------
'''
Easing Table Generator
'''
from __future__ import division, unicode_literals, print_function
import sys
import os
import getopt
import math


__docformat__ = 'restructuredtext'


def cubic_bezier_at(t, a, b, c, d):
    return (
        ((1-t)**3) * a +
        3 * ((1-t)**2) * t * b +
        3 * (1-t) * (t**2) * c +
        (t**3) * d
        )


def bezier(time):
    easeOutSine = [0.39, 0.575, 0.565, 1]
    x = cubic_bezier_at(time, 0, 0.39, 0.565, 1)
    y = cubic_bezier_at(time, 0, 0.575, 1, 1)
    return x


def easeInSine(time):
    return -1 * math.cos(time * math.pi/2) + 1


def easeOutSine(time):
    return math.sin(time * math.pi/2)


def sineEaseInOut(time):
    return -0.5 * (math.cos(math.pi * time) - 1)


def quadEaseIn(time):
    return time * time


def quadEaseOut(time):
    return -1 * time * (time - 2)


def quadEaseInOut(time):
    time = time * 2
    if time < 1:
        return 0.5 * time * time
    time = time - 1
    return -0.5 * (time * (time - 2) - 1)


def cubicEaseIn(time):
    return time * time * time


def cubicEaseOut(time):
    time = time - 1
    return (time * time * time + 1)


def cubicEaseInOut(time):
    time = time * 2
    if time < 1:
        return 0.5 * time * time * time
    time = time - 2
    return 0.5 * (time * time * time + 2)


def quartEaseIn(time):
    return time * time * time * time


def quartEaseOut(time):
    time = time -1
    return -(time * time * time * time - 1)


def quartEaseInOut(time):
    time = time * 2
    if time < 1:
        return 0.5 * time * time * time * time
    time = time - 2
    return -0.5 * (time * time * time * time - 2)


def quintEaseIn(time):
    return time * time * time * time * time


def quintEaseOut(time):
    time = time - 1
    return time * time * time * time * time + 1


def quintEaseInOut(time):
    time = time * 2
    if time < 1:
        return 0.5 * time * time * time * time * time
    time = time - 2
    return 0.5 * (time * time * time * time * time + 2)


formulas = {
    'easeInSine': easeInSine,
    'easeOutSine': easeOutSine,
    'bezier': bezier
}


def validFormulas():
    return formulas.keys()


def run(formula, steps, maxvalue, reverse):
    fn = formulas[formula]
    l = []

    for i in xrange(steps):
        # does not include 0, but includes 1
        ret = fn((i+1)/steps)
        l.append(int(round(ret * float(maxvalue))))

    # print 8 elements per line
    sys.stdout.write('; autogenerated table. function=%s, #values=%d, max value=%d' % (formula, int(steps), int(maxvalue)))
    for i, item in enumerate(l):
        if i%8==0:
            sys.stdout.write('\n.byte $%02x' % item)
        else:
            sys.stdout.write(',$%02x' % item)
    sys.stdout.write('\n')

    # reverse ?
    if reverse:
        # reverse list
        l.reverse()
        # remove first element, when time == 1
        del l[0]
        # append new element, when time == 0
        l.append(int(round(fn(0) * float(maxvalue))))

        # print 8 elements per line
        sys.stdout.write('; reversed')
        for i, item in enumerate(l):
            if i%8==0:
                sys.stdout.write('\n.byte $%02x' % item)
            else:
                sys.stdout.write(',$%02x' % item)
        sys.stdout.write('\n')


def help():
    print "%s v0.1 - An utility to create easing tables. Useful for c64 and other 8-bit computers" % sys.argv[0]
    print "Usage:"
    print "\t-f formula"
    print "\t-s steps"
    print "\t-m maxvalue"
    print "\nExample:"
    print "\t%s -f easeInSine -s 256 -m 128" % sys.argv[0]
    print "\nValid formulas: %s" % validFormulas()
    sys.exit(-1)

if __name__ == "__main__":
    if len(sys.argv) == 1:
        help()

    formula = 'easyInSine'
    steps = 256
    maxvalue = 128
    reverse = False

    argv = sys.argv[1:]
    try:
        opts, args = getopt.getopt(argv, "f:s:m:r", ["formula=", "steps=", "maxvalue=", "reverse"])
        for opt, arg in opts:
            if opt in ("-f", "--formula"):
                formula = arg
            elif opt in ("-s", "--steps"):
                steps = int(arg)
            elif opt in ("-m", "--maxvalue"):
                maxvalue = arg
            elif opt in ("-r", "--reverse"):
                reverse = True

    except getopt.GetoptError, e:
        print e

    run(formula, steps, maxvalue, reverse)
