#!/usr/bin/python
# ----------------------------------------------------------------------------
# Frequency table generator - riq
# ----------------------------------------------------------------------------
'''
Multiplying Table Generator
'''
from __future__ import division, unicode_literals, print_function
import sys
import os
import getopt


__docformat__ = 'restructuredtext'


def run(basefreq, octaves, steps, phi):
    # print 8 elements per line
    sys.stdout.write('; autogenerated table: %s -b%d -o%d -s%d %d\n' % (os.path.basename(sys.argv[0]), basefreq, octaves, steps, phi))

    constant = (256 ** 3) / phi

    notes = []
    for o in range(0, octaves):
        for s in range(0, steps):
            # +3 , since it stars with C, not A
            # -5, since it starts 5 octaves below
            note = ((o-5) * steps) + 3 + s
            freq = basefreq * 2 ** (note / steps)
            sid_freq = freq * constant
            if sid_freq > 0xffff:
                sid_freq = 0xffff
            notes.append(sid_freq)

    sys.stdout.write("freq_table_lo:\n")
    for o in range(0, octaves):
        sys.stdout.write(".byte ")
        for i in range(0, steps):
            if i is not 0:
                sys.stdout.write(",")
            sys.stdout.write("$%02x" % (int(round(notes[i + o * steps])) & 0xff))
        sys.stdout.write("  ; %d\n" % o)

    sys.stdout.write("\nfreq_table_hi:\n")
    for o in range(0, octaves):
        sys.stdout.write(".byte ")
        for i in range(0, steps):
            if i is not 0:
                sys.stdout.write(",")
            sys.stdout.write("$%02x" % (int(round(notes[i + o * steps])) >> 8))
        sys.stdout.write("  ; %d\n" % o)


def help():
    print("%s v0.1 - An utility to generate SID frequency tables" % os.path.basename(sys.argv[0]))
    print("\nUsage: %s [options] phi" % os.path.basename(sys.argv[0]))
    print("\t-b base_freq\t\t\tDefault=440")
    print("\t-o octaves\t\t\tDefault=8")
    print("\t-s steps_per_octave\t\tDefault=12")
    print("\nUse a phi of 985248 for PAL, 1022727 for NTSC and 1023440 for PAL-N (Drean)")
    print("\nExamples:")
    print("\t%s -o8 -s12 985248" % os.path.basename(sys.argv[0]))
    sys.exit(-1)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        help()

    octaves = 8
    steps = 12
    phi = 985248
    basefreq = 440

    argv = sys.argv[1:]
    try:
        opts, args = getopt.getopt(argv, "b:o:s:", ["basefreq=", "octaves=", "steps="])
        for opt, arg in opts:
            if opt in ("-o", "--octaves"):
                octaves = int(arg)
            elif opt in ("-s", "--steps"):
                steps = int(arg)
            elif opt in ("-b", "--basefreq"):
                basefreq = int(arg)
        if not len(args) == 1:
            help()
        else:
            phi = int(args[0])
    except getopt.GetoptError, e:
        print(e)

    run(basefreq, octaves, steps, phi)
